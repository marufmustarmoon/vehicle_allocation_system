from pydantic import BaseModel, ConfigDict, Field, field_validator
from datetime import datetime, timezone
import pytz
from typing import Optional
from bson import ObjectId

class AllocationIn(BaseModel):
    employee_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    vehicle_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    allocation_date: datetime = Field(..., description="The allocation date must be in the future.")

    @field_validator('allocation_date')
    def validate_allocation_date(cls, v):
        
        if v < datetime.now(timezone.utc):
            raise ValueError('The allocation date must be in the future.')
        return v

class AllocationOut(BaseModel):

   
    employee_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    vehicle_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    allocation_date: datetime

class AllocationDocument(BaseModel):
    
    
    employee_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    vehicle_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    allocation_date: datetime

class AllocationHistoryFilter(BaseModel):
    employee_id: Optional[str] = None
    vehicle_id: Optional[str] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None


class AllocationResponse(BaseModel):

    id: str = Field(..., description="Unique identifier generated by MongoDB.")
    employee_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    vehicle_id: str = Field(..., description="Unique identifier generated by MongoDB.")
    allocation_date: datetime